/* Too complicated, too slow, but educational...
Also not universally working:

Test case #1: 	AC 	[0.143s, 	40.96 MB] 	(0/0)
Test case #2: 	AC 	[0.144s, 	40.94 MB] 	(0/0)
Test case #3: 	WA 	[0.150s, 	40.91 MB] 	(0/1)
Test case #4: 	WA 	[0.153s, 	40.91 MB] 	(0/1)
Test case #5: 	WA 	[0.158s, 	40.96 MB] 	(0/1)
Test case #6: 	WA 	[0.220s, 	43.21 MB] 	(0/1)
Test case #7: 	IR (java.lang.StringIndexOutOfBoundsException) 	[0.273s, 	44.29 MB] 	(0/1)
Test case #8: 	AC 	[0.144s, 	40.91 MB] 	(1/1)
Test case #9: 	IR (java.lang.ArrayIndexOutOfBoundsException) 	[0.147s, 	40.77 MB] 	(0/1)
Test case #10: 	TLE 	[>1.000s, 	63.08 MB] 	(0/1)
Test case #11: 	WA 	[0.764s, 	46.25 MB] 	(0/1)
Test case #12: 	IR (java.lang.StringIndexOutOfBoundsException) 	[0.796s, 	45.90 MB] 	(0/1)


The Main issue I encountered is with putting in the brackets. Especially pinpointing where the brackets end.


 */


import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Scanner;

public class Indices {

   /* private static void fakeInput(){

        String input =
                "6\n" +
                "1 2 3 5 7 1";

System.setIn(new ByteArrayInputStream(input.getBytes()));

    }*/



    public static void main (String[] args) {
        /*fakeInput();*/
        Scanner in = new Scanner(System.in);

        int N = in.nextInt();
        in.nextLine();

        int[] numbers = new int [N];

        for (int i = 0; i < numbers.length; i++) {

            numbers[i] = in.nextInt();
        }

        int currentIndex = 0;
        int maxIndex = N -1;

       /* int CycleStart = 0;
        int CycleEnd = 0;*/

        boolean[] flags = new boolean[N];

        StringBuilder result = new StringBuilder();


while (currentIndex <= maxIndex){
    if (flags[currentIndex]){

        result.replace(currentIndex, currentIndex, "(" );
        break;
    }

        result.append(String.valueOf(currentIndex));

        flags[currentIndex] = true;

        currentIndex = numbers[currentIndex];


}


String InterimResult = result.toString();

        char[] EndResult = InterimResult.toCharArray();

       StringBuilder Output = new StringBuilder();

        for (int i = 0; i < EndResult.length; i++) {

                Output.append(EndResult[i]+ " ");

        }

if (InterimResult.contains("(")) {
    Output = Output.append(")");
}
        String outputString = Output.toString();

        outputString = outputString.replace(" (", "(");
        outputString = outputString.replace(" )", ")");
        outputString = outputString.replace("( ", "(");
        outputString = outputString.trim();

                System.out.println(outputString);

    }


}








/*

    You are given a zero-based array ARR with N integer numbers in it. Each element of ARR is an index in the ARR (seems like a recursive definition, right?).

        You are also given the sequence that starts from the first element (0) then moves to the element with index ARR[0], then moves to the element with index ARR[ARR[0]], then moves to the element with index ARR[ARR[ARR[0]]], and so onâ€¦

        The full sequence is generated by performing these actions until you reach an index that is outside the bounds of the array ARR. Of course cycles are absolutely possible. When a cycle is started in the sequence it may never reach any index that is outside the bounds of the ARR.

        Write a program that outputs the elements in the given sequence. When you find cycle you should output it in round brackets as shown in the examples below. Please note that no spaces should be printed between the brackets and the number.
        Input

        Read from the standard input

        On the first line you are given the number N of the elements in ARR

        On the second line there will be N numbers separated by a single space
        The numbers of ARR

        The input data will always be valid and in the format described. There is no need to check it explicitly.

        Output

        Print to the standard output

        On the only output line you should print the described sequence
        All the cycles should be printed with round brackets, with no spaces between the brackets and the numbers

        Constraints

        N will be between 1 and 200 000, inclusive.

        Numbers in ARR will be between -2 000 000 000 and 2 000 000 000, inclusive.

        Sample Test
        Input
        Copy

        6
        1 2 3 5 7 8

        Output
        Copy

        0 1 2 3 5

        Input
        Copy

        6
        1 2 3 5 7 1

        Output
        Copy

        0(1 2 3 5)


*/
